# docker-compose.yml
volumes:
  shared-data:
  dbdata:

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data

  api:
    build:
      context: .
      dockerfile: Bcp.API.Dockerfile
    image: bcp.api:0.0.0
    container_name: bcp-api
    ports:
      - "5163:5163"
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: "http://+:5163"
      ASPNETCORE_ENVIRONMENT: "${ASPNETCORE_ENVIRONMENT:-development}"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      WEB_BASE_URL: "http://web:5000"
    volumes:
      - shared-data:/app/uploads

  worker:
    build:
      context: .
      dockerfile: Bcp.Worker.Dockerfile
    image: bcp.worker:0.0.0
    container_name: bcp-worker
    ports:
      - "5555:5555"
    depends_on:
      - api
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - shared-data:/app/uploads

  web:
    build:
      context: .
      dockerfile: Bcp.Web.Dockerfile
    image: bcp.web:0.0.0
    container_name: bcp-web
    ports:
      - "5000:8080"
    depends_on:
      - api
    environment:
      ASPNETCORE_ENVIRONMENT: "${ASPNETCORE_ENVIRONMENT:-development}"
      API_BASE_URL: "http://api:5163"
    volumes:
      - shared-data:/root/.aspnet/DataProtection-Keys